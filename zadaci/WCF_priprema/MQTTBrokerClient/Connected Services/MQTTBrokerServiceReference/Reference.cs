//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MQTTBrokerClient.MQTTBrokerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MQTTBrokerServiceReference.IMQTTBrokerService", CallbackContract=typeof(MQTTBrokerClient.MQTTBrokerServiceReference.IMQTTBrokerServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMQTTBrokerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMQTTBrokerService/Subscribe")]
        void Subscribe(string topic);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMQTTBrokerService/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMQTTBrokerService/Unsubscribe")]
        void Unsubscribe(string topic);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMQTTBrokerService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMQTTBrokerService/Publish")]
        void Publish(string topic, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMQTTBrokerService/Publish")]
        System.Threading.Tasks.Task PublishAsync(string topic, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMQTTBrokerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMQTTBrokerService/OnPublish")]
        void OnPublish(string topic, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMQTTBrokerServiceChannel : MQTTBrokerClient.MQTTBrokerServiceReference.IMQTTBrokerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MQTTBrokerServiceClient : System.ServiceModel.DuplexClientBase<MQTTBrokerClient.MQTTBrokerServiceReference.IMQTTBrokerService>, MQTTBrokerClient.MQTTBrokerServiceReference.IMQTTBrokerService {
        
        public MQTTBrokerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MQTTBrokerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MQTTBrokerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MQTTBrokerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MQTTBrokerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe(string topic) {
            base.Channel.Subscribe(topic);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string topic) {
            return base.Channel.SubscribeAsync(topic);
        }
        
        public void Unsubscribe(string topic) {
            base.Channel.Unsubscribe(topic);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(string topic) {
            return base.Channel.UnsubscribeAsync(topic);
        }
        
        public void Publish(string topic, string message) {
            base.Channel.Publish(topic, message);
        }
        
        public System.Threading.Tasks.Task PublishAsync(string topic, string message) {
            return base.Channel.PublishAsync(topic, message);
        }
    }
}
