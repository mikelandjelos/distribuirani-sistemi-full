//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ChatServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Poruka", Namespace="http://schemas.datacontract.org/2004/07/Chat")]
    [System.SerializableAttribute()]
    public partial class Poruka : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PosiljalacField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimalacField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SadrzajField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime VremeSlanjaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Posiljalac {
            get {
                return this.PosiljalacField;
            }
            set {
                if ((object.ReferenceEquals(this.PosiljalacField, value) != true)) {
                    this.PosiljalacField = value;
                    this.RaisePropertyChanged("Posiljalac");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Primalac {
            get {
                return this.PrimalacField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimalacField, value) != true)) {
                    this.PrimalacField = value;
                    this.RaisePropertyChanged("Primalac");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sadrzaj {
            get {
                return this.SadrzajField;
            }
            set {
                if ((object.ReferenceEquals(this.SadrzajField, value) != true)) {
                    this.SadrzajField = value;
                    this.RaisePropertyChanged("Sadrzaj");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime VremeSlanja {
            get {
                return this.VremeSlanjaField;
            }
            set {
                if ((this.VremeSlanjaField.Equals(value) != true)) {
                    this.VremeSlanjaField = value;
                    this.RaisePropertyChanged("VremeSlanja");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceReference.IChatService", CallbackContract=typeof(ChatClient.ChatServiceReference.IChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Registracija")]
        void Registracija(string nadimak, string sifra);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Registracija")]
        System.Threading.Tasks.Task RegistracijaAsync(string nadimak, string sifra);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/PrijavaOdjava")]
        void PrijavaOdjava(string nadimak, string sifra);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/PrijavaOdjava")]
        System.Threading.Tasks.Task PrijavaOdjavaAsync(string nadimak, string sifra);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Posalji")]
        void Posalji(ChatClient.ChatServiceReference.Poruka poruka);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Posalji")]
        System.Threading.Tasks.Task PosaljiAsync(ChatClient.ChatServiceReference.Poruka poruka);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/IstorijaPrimljenihPoruka")]
        void IstorijaPrimljenihPoruka(string nadimak, System.DateTime od, System.DateTime @do);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/IstorijaPrimljenihPoruka")]
        System.Threading.Tasks.Task IstorijaPrimljenihPorukaAsync(string nadimak, System.DateTime od, System.DateTime @do);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RegistracijaEvent")]
        void RegistracijaEvent(string povratneInformacije);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/PrijavaOdjavaEvent")]
        void PrijavaOdjavaEvent(string povratneInformacije);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/PoslataPorukaEvent")]
        void PoslataPorukaEvent(ChatClient.ChatServiceReference.Poruka poruka);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ZatrazenaIstorijaPrimljenihPorukaEvent")]
        void ZatrazenaIstorijaPrimljenihPorukaEvent(ChatClient.ChatServiceReference.Poruka[] istorijaPoruka);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ChatClient.ChatServiceReference.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<ChatClient.ChatServiceReference.IChatService>, ChatClient.ChatServiceReference.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Registracija(string nadimak, string sifra) {
            base.Channel.Registracija(nadimak, sifra);
        }
        
        public System.Threading.Tasks.Task RegistracijaAsync(string nadimak, string sifra) {
            return base.Channel.RegistracijaAsync(nadimak, sifra);
        }
        
        public void PrijavaOdjava(string nadimak, string sifra) {
            base.Channel.PrijavaOdjava(nadimak, sifra);
        }
        
        public System.Threading.Tasks.Task PrijavaOdjavaAsync(string nadimak, string sifra) {
            return base.Channel.PrijavaOdjavaAsync(nadimak, sifra);
        }
        
        public void Posalji(ChatClient.ChatServiceReference.Poruka poruka) {
            base.Channel.Posalji(poruka);
        }
        
        public System.Threading.Tasks.Task PosaljiAsync(ChatClient.ChatServiceReference.Poruka poruka) {
            return base.Channel.PosaljiAsync(poruka);
        }
        
        public void IstorijaPrimljenihPoruka(string nadimak, System.DateTime od, System.DateTime @do) {
            base.Channel.IstorijaPrimljenihPoruka(nadimak, od, @do);
        }
        
        public System.Threading.Tasks.Task IstorijaPrimljenihPorukaAsync(string nadimak, System.DateTime od, System.DateTime @do) {
            return base.Channel.IstorijaPrimljenihPorukaAsync(nadimak, od, @do);
        }
    }
}
